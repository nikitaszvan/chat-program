/// client/src/components/Message.js

form onSubmit={handleSendMessage}

// in same doc above

function handleSendMessage(e) {
    e.preventDefault();
    if (message && socket) {
        socket.emit("sendMessage", { name: user.name, msg: message, room });
        setMessage("");
    }
}

///app.js (index.js on server side)

socket.on("sendMessage", ({ name, msg, room }) => {
    io.to(room).emit("message", {
      name,
      msg,
    });
  });


/// Message.js

useEffect(() => {
    if (socket) {
      socket.on("message", (message) => {
        setMessages([...messages, message]);
        let element = document.getElementById("messages");
        element.scrollTop = element.scrollHeight;
      });
    }

    return () => {
      socket?.off("message");
    };
  }, [socket, messages]);

/// Message.js in the return section

<div
    id="messages"
    className="h-full text-sm pt-2 overflow-y-auto no-scrollbar"
>
    <div className="">
        {messages?.map((item, index) => renderMessage(item, index))}
    </div>
</div>

/// Message.js before the return section

function renderMessage(item, index) {
    if (item.name !== "Admin")
        return (
        <div
            key={index}
            className={ item.name === user.name ? "flex justify-end" : "flex justify-start" }
        >
            <div key={index}>
                <p>{item.name}</p>
                <p>{item.msg}</p>
            </div>
        </div>
        );
    return (
        <div key={index}>
            {item.msg}
        </div>
    );
}